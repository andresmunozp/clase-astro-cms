---
import Categories from "./Categories.astro";
import type Post from "../interfaces/post.js";
import fetchApi from "../lib/strapi.js";

interface Props {
  posts?: Post[];
}

const { posts: providedPosts } = Astro.props as Partial<Props>;

const posts: Post[] =
  providedPosts ??
  (await fetchApi<Post[]>({
    endpoint: "posts",
    query: {
      // Solo obtener los campos que necesitamos
      "fields[0]": "title",
      "fields[1]": "description",
      "fields[2]": "slug",
      "fields[3]": "publishedAt",
      // Popular featuredImage pero solo con los campos necesarios
      "populate[featuredImage][fields][0]": "url",
      "populate[featuredImage][fields][1]": "alternativeText",
      // Popular categories con solo los campos necesarios
      "populate[categories][fields][0]": "Name",
      "populate[categories][fields][1]": "slug",
      "populate[categories][fields][2]": "documentId",
      sort: "createdAt:desc",
      "pagination[limit]": "6",
    },
    wrappedByKey: "data",
  }));

console.log(posts);

const url_image = "http://localhost:1337";
---

{
  posts.map((post) => {
    const {
      title,
      description,
      slug,
      publishedAt,
      featuredImage,
      categories = [],
    } = post;
    const { url, alternativeText } = featuredImage || {};
    const imageUrl = featuredImage ? `${url_image}${url}` : "";

    return (
      <article>
        <a href={`/blog/${slug}`} aria-label={`Leer: ${title}`} title={title}>
          {featuredImage && (
            <img
              transition:name={`img-${slug}`}
              src={imageUrl}
              alt={alternativeText}
            />
          )}
          <div class="content">
            <h2>{title}</h2>
            <p>{description}</p>
            <time datetime={publishedAt}>
              {new Date(publishedAt).toLocaleDateString()}
            </time>
            <Categories categories={categories} variant="badges" />
          </div>
        </a>
      </article>
    );
  })
}

<style>
  article {
    border-radius: 8px;
    background-color: rgba(42, 42, 42, 0.3);
    transition: transform 0.2s;
  }

  a {
    text-decoration: none;
    display: block;
  }

  .grid-article {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 16px;
    padding: 16px;
  }

  article:hover {
    transform: scale(1.02);
    transition: ease-in-out 0.2s;
  }

  .hero {
    text-align: center;
    padding: 40px 20px;
  }

  img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 8px 8px 0 0;
  }

  time {
    display: block;
    margin-top: 8px;
    color: #888;
    font-size: 0.9em;
  }

  .content {
    padding: 0 16px 16px 16px;
  }

  .content p {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
  }
</style>
