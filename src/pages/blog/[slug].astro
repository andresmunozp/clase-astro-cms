---
import { marked } from "marked";
import type Post from "../../interfaces/post";
import Categories from "../../components/Categories.astro";
import Layout from "../../layouts/Layout.astro";
import { processContent } from "../../lib/utils/prepareContentForTOC";
import Toc from "../../components/Toc.astro";
import fetchApi from "../../lib/strapi.js";

const { slug } = Astro.params;

const posts = await fetchApi<Post>({
  endpoint: "posts",
  query: {
    "filters[slug][$eq]": `${slug}`,
    // Solo obtener los campos que necesitamos para la página de detalle
    "fields[0]": "title",
    "fields[1]": "content",
    "fields[2]": "description",
    "fields[3]": "publishedAt",
    // Popular featuredImage pero solo con los campos necesarios
    "populate[featuredImage][fields][0]": "url",
    "populate[featuredImage][fields][1]": "alternativeText",
    // Popular categories con solo los campos necesarios
    "populate[categories][fields][0]": "Name",
    "populate[categories][fields][1]": "slug",
    "populate[categories][fields][2]": "documentId",
  },
  wrappedByKey: "data",
  wrappedByList: true,
});

if (!posts) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

console.log(posts);

const { title, content, description, publishedAt, featuredImage, categories } =
  posts;
const { url, alternativeText } = featuredImage;

const url_image = "http://localhost:1337";
const imgUrl = `${url_image}${url}`;

const postContent = await marked.parse(content);
const { processedContent: contentWithIds, headings: extractedHeadings } =
  processContent(postContent);
---

<Layout title={title} description={description}>
  <header class="post-header">
    <div class="title-container">
      <a href="/">Volver</a>
      <h1>{title}</h1>
    </div>

    <div class="image-description-container">
      <div class="post-image-container">
        <img
          width="550"
          height="400"
          class="post-image"
          src={imgUrl}
          alt={alternativeText}
        />
      </div>

      <div class="description-data">
        <p>{description}</p>
        <time datetime={publishedAt}>
          {new Date(publishedAt).toLocaleDateString()}
        </time>
        <Categories categories={categories} variant="badges" />
      </div>
    </div>
  </header>

  <main>
    <article class="content">
      <div class="post-content" set:html={contentWithIds} />
      <Toc extractedHeadings={extractedHeadings} />
    </article>
  </main>
</Layout>

<style>
  .title-container {
    display: flex;
    flex-direction: row;
    align-items: center;
  }

  .title-container a {
    margin-right: 12px;
    color: #09f;
    text-decoration: none;
    transition: color 0.2s ease;

    &:hover {
      color: #0051a2;
    }
  }

  .title-container h1 {
    flex: 1;
  }

  /* Layout principal */
  .content {
    display: flex;
    flex-direction: row;
    line-height: 1.6;
    color: #333;
    margin: 0 auto;
    max-width: 1200px;
    gap: 20px;
  }

  .post-content {
    padding: 20px;
    box-sizing: border-box;
    flex: 1;
  }

  .description-data :global(.badges) {
    margin-top: 8px;
  }

  /* Estilos para el contenido del post */
  :global(.post-content p),
  :global(.post-content ul),
  :global(.post-content ol) {
    margin-bottom: 1lh;
  }

  /* Header del post */
  .post-header {
    display: flex;
    flex-direction: column;
    max-width: 1000px;
    margin: auto;
    gap: 20px;
    box-sizing: border-box;
    padding: 20px;
  }

  .post-header > div {
    flex: 1;
  }

  .post-header h1 {
    font-size: 2.5rem;
    margin-bottom: 16px;
    text-align: center;
  }

  .post-header p {
    font-size: 1.2rem;
  }

  .post-header time {
    font-size: 0.9rem;
    color: #999;
    margin-bottom: 20px;
  }

  .image-description-container {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 20px;
    justify-content: center;
  }

  .post-image-container {
    display: block;
    justify-content: center;
  }

  .post-image {
    max-width: 550px;
    width: 100%;
    height: auto;
    border-radius: 8px;
    object-fit: cover;
  }

  /* Enlaces de ancla (#) */
  :global(.anchor-link) {
    color: #ccc;
    text-decoration: none;
    margin-left: 8px;
    font-weight: normal;
    opacity: 0;
    transition:
      opacity 0.2s ease,
      color 0.2s ease;
    font-size: 0.8em;
  }

  :global(h1:hover .anchor-link),
  :global(h2:hover .anchor-link),
  :global(h3:hover .anchor-link),
  :global(h4:hover .anchor-link) {
    opacity: 1;
  }

  :global(.anchor-link:hover) {
    color: #666;
    text-decoration: none;
  }

  /* Navegación suave y offset */
  :global(html) {
    scroll-behavior: smooth;
  }

  :global(h1[id]),
  :global(h2[id]),
  :global(h3[id]),
  :global(h4[id]) {
    scroll-margin-top: 20px;
  }

  /* Imágenes en el contenido */
  :global(main p img) {
    max-width: 450px;
    max-height: 450px;
    object-fit: cover;
    border-radius: 8px;
    display: block;
    margin: 0 auto;
  }
</style>
